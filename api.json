[
  {
    "path": "/$sort",
    "url": {
      "oauth": "https://oauth.reddit.com/$sort",
      "standard": "https://www.reddit.com/$sort"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/([^/]+)$"
    },
    "parameters": [
      "sort"
    ]
  },
  {
    "path": "/about/$location",
    "url": {
      "oauth": "https://oauth.reddit.com/about/$location",
      "standard": "https://www.reddit.com/about/$location"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/([^/]+)$"
    },
    "parameters": [
      "location"
    ]
  },
  {
    "path": "/about/$where",
    "url": {
      "oauth": "https://oauth.reddit.com/about/$where",
      "standard": "https://www.reddit.com/about/$where"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/([^/]+)$"
    },
    "parameters": [
      "where"
    ]
  },
  {
    "path": "/about/banned",
    "url": {
      "oauth": "https://oauth.reddit.com/about/banned",
      "standard": "https://www.reddit.com/about/banned"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/banned$"
    }
  },
  {
    "path": "/about/contributors",
    "url": {
      "oauth": "https://oauth.reddit.com/about/contributors",
      "standard": "https://www.reddit.com/about/contributors"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/contributors$"
    }
  },
  {
    "path": "/about/edited",
    "url": {
      "oauth": "https://oauth.reddit.com/about/edited",
      "standard": "https://www.reddit.com/about/edited"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/edited$"
    }
  },
  {
    "path": "/about/log",
    "url": {
      "oauth": "https://oauth.reddit.com/about/log",
      "standard": "https://www.reddit.com/about/log"
    },
    "oauth": [
      "modlog"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get a list of recent moderation actions.\n\nModerator actions taken within a subreddit are logged. This listing is\na view of that log with various filters to aid in analyzing the\ninformation.\n\nThe optional mod parameter can be a comma-delimited list of moderator\nnames to restrict the results to, or the string a to restrict the\nresults to admin actions taken within the subreddit.\n\nThe type parameter is optional and if sent limits the log entries\nreturned to only those of the type specified.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 500)"
      },
      "mod": {
        "describe": "(optional) a moderator filter"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "type": {
        "describe": "one of (banuser, unbanuser, removelink, approvelink, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, sticky, unsticky)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/log$"
    }
  },
  {
    "path": "/about/moderators",
    "url": {
      "oauth": "https://oauth.reddit.com/about/moderators",
      "standard": "https://www.reddit.com/about/moderators"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/moderators$"
    }
  },
  {
    "path": "/about/modqueue",
    "url": {
      "oauth": "https://oauth.reddit.com/about/modqueue",
      "standard": "https://www.reddit.com/about/modqueue"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/modqueue$"
    }
  },
  {
    "path": "/about/reports",
    "url": {
      "oauth": "https://oauth.reddit.com/about/reports",
      "standard": "https://www.reddit.com/about/reports"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/reports$"
    }
  },
  {
    "path": "/about/spam",
    "url": {
      "oauth": "https://oauth.reddit.com/about/spam",
      "standard": "https://www.reddit.com/about/spam"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/spam$"
    }
  },
  {
    "path": "/about/unmoderated",
    "url": {
      "oauth": "https://oauth.reddit.com/about/unmoderated",
      "standard": "https://www.reddit.com/about/unmoderated"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/unmoderated$"
    }
  },
  {
    "path": "/about/wikibanned",
    "url": {
      "oauth": "https://oauth.reddit.com/about/wikibanned",
      "standard": "https://www.reddit.com/about/wikibanned"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/wikibanned$"
    }
  },
  {
    "path": "/about/wikicontributors",
    "url": {
      "oauth": "https://oauth.reddit.com/about/wikicontributors",
      "standard": "https://www.reddit.com/about/wikicontributors"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/about/wikicontributors$"
    }
  },
  {
    "path": "/api/$subreddit_stylesheet",
    "url": {
      "oauth": "https://oauth.reddit.com/api/$subreddit_stylesheet",
      "standard": "https://ssl.reddit.com/api/$subreddit_stylesheet"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Update a subreddit's stylesheet.\n\nop should be save to update the contents of the stylesheet.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "op": {
        "describe": "one of (save, preview)"
      },
      "reason": {
        "describe": "a string up to 256 characters long, consisting of printable characters."
      },
      "stylesheet_contents": {
        "describe": "the new stylesheet content"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/([^/]+)_stylesheet$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/api/accept_moderator_invite",
    "url": {
      "standard": "https://ssl.reddit.com/api/accept_moderator_invite"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Accept an invite to moderate the specified subreddit.\n\nThe authenticated user must have been invited to moderate the subreddit\nby one of its current moderators.\n\nSee also: /api/friend and\n/subreddits/mine.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/accept_moderator_invite$"
    }
  },
  {
    "path": "/api/adddeveloper",
    "url": {
      "standard": "https://ssl.reddit.com/api/adddeveloper"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "client_id": {
        "describe": "an app developed by the user"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/adddeveloper$"
    }
  },
  {
    "path": "/api/approve",
    "url": {
      "oauth": "https://oauth.reddit.com/api/approve",
      "standard": "https://ssl.reddit.com/api/approve"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Approve a link or comment.\n\nIf the thing was removed, it will be re-inserted into appropriate\nlistings. Any reports on the approved thing will be discarded.\n\nSee also: /api/remove.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/approve$"
    }
  },
  {
    "path": "/api/block",
    "url": {
      "oauth": "https://oauth.reddit.com/api/block",
      "standard": "https://ssl.reddit.com/api/block"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "For blocking via inbox.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/block$"
    }
  },
  {
    "path": "/api/clear_sessions",
    "url": {
      "standard": "https://ssl.reddit.com/api/clear_sessions"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Clear all session cookies and replace the current one.\n\nA valid password (curpass) must be supplied.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "curpass": {
        "describe": "the user's current password"
      },
      "dest": {
        "describe": "destination url (must be same-domain)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/clear_sessions$"
    }
  },
  {
    "path": "/api/clearflairtemplates",
    "url": {
      "oauth": "https://oauth.reddit.com/api/clearflairtemplates",
      "standard": "https://ssl.reddit.com/api/clearflairtemplates"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_type": {
        "describe": "one of (USER_FLAIR, LINK_FLAIR)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/clearflairtemplates$"
    }
  },
  {
    "path": "/api/comment",
    "url": {
      "oauth": "https://oauth.reddit.com/api/comment",
      "standard": "https://ssl.reddit.com/api/comment"
    },
    "oauth": [
      "submit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Submit a new comment or reply to a message.\n\nparent is the fullname of the thing being replied to. Its value\nchanges the kind of object created by this request:\n\n\nthe fullname of a Link: a top-level comment in that Link's thread.\nthe fullname of a Comment: a comment reply to that comment.\nthe fullname of a Message: a message reply to that message.\n\n\ntext should be the raw markdown body of the comment or message.\n\nTo start a new message thread, use /api/compose.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "text": {
        "describe": "raw markdown text"
      },
      "thing_id": {
        "describe": "fullname of parent thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/comment$"
    }
  },
  {
    "path": "/api/compose",
    "url": {
      "oauth": "https://oauth.reddit.com/api/compose",
      "standard": "https://ssl.reddit.com/api/compose"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Handles message composition under /message/compose.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "captcha": {
        "describe": "the user's response to the CAPTCHA challenge"
      },
      "from_sr": {
        "describe": "subreddit name"
      },
      "iden": {
        "describe": "the identifier of the CAPTCHA challenge"
      },
      "subject": {
        "describe": "a string no longer than 100 characters"
      },
      "text": {
        "describe": "raw markdown text"
      },
      "to": {
        "describe": "the name of an existing user"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/compose$"
    }
  },
  {
    "path": "/api/del",
    "url": {
      "oauth": "https://oauth.reddit.com/api/del",
      "standard": "https://ssl.reddit.com/api/del"
    },
    "oauth": [
      "edit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Delete a Link or Comment.",
    "args": {
      "id": {
        "describe": "fullname of a thing created by the user"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/del$"
    }
  },
  {
    "path": "/api/delete_sr_header",
    "url": {
      "oauth": "https://oauth.reddit.com/api/delete_sr_header",
      "standard": "https://ssl.reddit.com/api/delete_sr_header"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Remove the subreddit's custom header image.\n\nThe sitewide-default header image will be shown again after this call.\n\nSee also: /api/upload_sr_img.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/delete_sr_header$"
    }
  },
  {
    "path": "/api/delete_sr_img",
    "url": {
      "oauth": "https://oauth.reddit.com/api/delete_sr_img",
      "standard": "https://ssl.reddit.com/api/delete_sr_img"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Remove an image from the subreddit's custom image set.\n\nThe image will no longer count against the subreddit's image limit.\nHowever, the actual image data may still be accessible for an\nunspecified amount of time. If the image is currently referenced by the\nsubreddit's stylesheet, that stylesheet will no longer validate and\nwon't be editable until the image reference is removed.\n\nSee also: /api/upload_sr_img.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "img_name": {
        "describe": "a valid subreddit image name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/delete_sr_img$"
    }
  },
  {
    "path": "/api/delete_user",
    "url": {
      "standard": "https://ssl.reddit.com/api/delete_user"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Delete the currently signed in account.\n\nA valid username/password and confirmation must be supplied. An\noptional delete_message may be supplied to explain the reason the\naccount is to be deleted.\n\nCalled by /prefs/delete on the site.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "confirm": {
        "describe": "boolean value"
      },
      "delete_message": {
        "describe": "a string no longer than 500 characters"
      },
      "passwd": {
        "describe": "the user's password"
      },
      "uh": {
        "describe": "a modhash"
      },
      "user": {
        "describe": "a username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/delete_user$"
    }
  },
  {
    "path": "/api/deleteapp",
    "url": {
      "standard": "https://ssl.reddit.com/api/deleteapp"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "client_id": {
        "describe": "an app developed by the user"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/deleteapp$"
    }
  },
  {
    "path": "/api/deleteflair",
    "url": {
      "oauth": "https://oauth.reddit.com/api/deleteflair",
      "standard": "https://ssl.reddit.com/api/deleteflair"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "name": {
        "describe": "a user by name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/deleteflair$"
    }
  },
  {
    "path": "/api/deleteflairtemplate",
    "url": {
      "oauth": "https://oauth.reddit.com/api/deleteflairtemplate",
      "standard": "https://ssl.reddit.com/api/deleteflairtemplate"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_template_id": {
        "describe": ""
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/deleteflairtemplate$"
    }
  },
  {
    "path": "/api/distinguish",
    "url": {
      "oauth": "https://oauth.reddit.com/api/distinguish",
      "standard": "https://ssl.reddit.com/api/distinguish"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Distinguish a thing's author with a sigil.\n\nThis can be useful to draw attention to and confirm the identity of the\nuser in the context of a link or comment of theirs. The options for\ndistinguish are as follows:\n\n\nyes - add a moderator distinguish ([M]). only if the user is a\n      moderator of the subreddit the thing is in.\nno - remove any distinguishes.\nadmin - add an admin distinguish ([A]). admin accounts only.\nspecial - add a user-specific distinguish. depends on user.\n\n\nThe first time a top-level comment is moderator distinguished, the\nauthor of the link the comment is in reply to will get a notification\nin their inbox.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "how": {
        "describe": "one of (yes, no, admin, special)"
      },
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/distinguish$"
    }
  },
  {
    "path": "/api/editusertext",
    "url": {
      "oauth": "https://oauth.reddit.com/api/editusertext",
      "standard": "https://ssl.reddit.com/api/editusertext"
    },
    "oauth": [
      "edit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Edit the body text of a comment or self-post.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "text": {
        "describe": "raw markdown text"
      },
      "thing_id": {
        "describe": "fullname of a thing created by the user"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/editusertext$"
    }
  },
  {
    "path": "/api/filter/filterpath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/filter/filterpath",
      "standard": "https://ssl.reddit.com/api/filter/filterpath"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "DELETE",
    "describe": "Delete a multi.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/filter/filterpath$"
    }
  },
  {
    "path": "/api/filter/filterpath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/filter/filterpath",
      "standard": "https://www.reddit.com/api/filter/filterpath"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Fetch a multi's data and subreddit list by name.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/filter/filterpath$"
    }
  },
  {
    "path": "/api/filter/filterpath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/filter/filterpath",
      "standard": "https://ssl.reddit.com/api/filter/filterpath"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Create a multi. Responds with 409 Conflict if it already exists.",
    "args": {
      "model": {
        "describe": "json data:\n\n{\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`),\n}\n"
      },
      "multipath": {
        "describe": "multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/filter/filterpath$"
    }
  },
  {
    "path": "/api/filter/filterpath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/filter/filterpath",
      "standard": "https://ssl.reddit.com/api/filter/filterpath"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "PUT",
    "describe": "Create or update a multi.",
    "args": {
      "model": {
        "describe": "json data:\n\n{\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`),\n}\n"
      },
      "multipath": {
        "describe": "multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/filter/filterpath$"
    }
  },
  {
    "path": "/api/filter/filterpath/r/$srname",
    "url": {
      "oauth": "https://oauth.reddit.com/api/filter/filterpath/r/$srname",
      "standard": "https://ssl.reddit.com/api/filter/filterpath/r/$srname"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "DELETE",
    "describe": "Remove a subreddit from a multi.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      },
      "srname": {
        "describe": "subreddit name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/filter/filterpath/r/([^/]+)$"
    },
    "parameters": [
      "srname"
    ]
  },
  {
    "path": "/api/filter/filterpath/r/$srname",
    "url": {
      "oauth": "https://oauth.reddit.com/api/filter/filterpath/r/$srname",
      "standard": "https://www.reddit.com/api/filter/filterpath/r/$srname"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get data about a subreddit in a multi.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      },
      "srname": {
        "describe": "subreddit name"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/filter/filterpath/r/([^/]+)$"
    },
    "parameters": [
      "srname"
    ]
  },
  {
    "path": "/api/filter/filterpath/r/$srname",
    "url": {
      "oauth": "https://oauth.reddit.com/api/filter/filterpath/r/$srname",
      "standard": "https://ssl.reddit.com/api/filter/filterpath/r/$srname"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "PUT",
    "describe": "Add a subreddit to a multi.",
    "args": {
      "model": {
        "describe": "json data:\n\n{\n  \"name\": subreddit name,\n}\n"
      },
      "multipath": {
        "describe": "multireddit url path"
      },
      "srname": {
        "describe": "subreddit name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/filter/filterpath/r/([^/]+)$"
    },
    "parameters": [
      "srname"
    ]
  },
  {
    "path": "/api/flair",
    "url": {
      "oauth": "https://oauth.reddit.com/api/flair",
      "standard": "https://ssl.reddit.com/api/flair"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "css_class": {
        "describe": "a valid subreddit image name"
      },
      "link": {
        "describe": "a fullname of a link"
      },
      "name": {
        "describe": "a user by name"
      },
      "text": {
        "describe": "a string no longer than 64 characters"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/flair$"
    }
  },
  {
    "path": "/api/flairconfig",
    "url": {
      "oauth": "https://oauth.reddit.com/api/flairconfig",
      "standard": "https://ssl.reddit.com/api/flairconfig"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_enabled": {
        "describe": "boolean value"
      },
      "flair_position": {
        "describe": "one of (left, right)"
      },
      "flair_self_assign_enabled": {
        "describe": "boolean value"
      },
      "link_flair_position": {
        "describe": "one of (`,left,right`)"
      },
      "link_flair_self_assign_enabled": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/flairconfig$"
    }
  },
  {
    "path": "/api/flaircsv",
    "url": {
      "oauth": "https://oauth.reddit.com/api/flaircsv",
      "standard": "https://ssl.reddit.com/api/flaircsv"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "flair_csv": {
        "describe": ""
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/flaircsv$"
    }
  },
  {
    "path": "/api/flairlist",
    "url": {
      "oauth": "https://oauth.reddit.com/api/flairlist",
      "standard": "https://www.reddit.com/api/flairlist"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 1000)"
      },
      "name": {
        "describe": "a user by name"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/api/flairlist$"
    }
  },
  {
    "path": "/api/flairselector",
    "url": {
      "oauth": "https://oauth.reddit.com/api/flairselector",
      "standard": "https://ssl.reddit.com/api/flairselector"
    },
    "oauth": [
      "flair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Return information about a users's flair options.\n\nIf link is given, return link flair options.\nOtherwise, return user flair options for this subreddit.\n\nThe signed in user's flair is also returned.\nSubreddit moderators may give a user by name to instead\nretrieve that user's flair.",
    "args": {
      "link": {
        "describe": "a fullname of a link"
      },
      "name": {
        "describe": "a user by name"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/flairselector$"
    }
  },
  {
    "path": "/api/flairtemplate",
    "url": {
      "oauth": "https://oauth.reddit.com/api/flairtemplate",
      "standard": "https://ssl.reddit.com/api/flairtemplate"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "css_class": {
        "describe": "a valid subreddit image name"
      },
      "flair_template_id": {
        "describe": ""
      },
      "flair_type": {
        "describe": "one of (USER_FLAIR, LINK_FLAIR)"
      },
      "text": {
        "describe": "a string no longer than 64 characters"
      },
      "text_editable": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/flairtemplate$"
    }
  },
  {
    "path": "/api/friend",
    "url": {
      "standard": "https://ssl.reddit.com/api/friend"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Complement to POST_unfriend: handles friending as well as\nprivilege changes on subreddits.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "ban_message": {
        "describe": "raw markdown text"
      },
      "container": {
        "describe": ""
      },
      "duration": {
        "describe": "an integer between 1 and 999"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "note": {
        "describe": "a string no longer than 300 characters"
      },
      "permissions": {
        "describe": ""
      },
      "type": {
        "describe": "one of (friend, moderator, moderator_invite, contributor, banned, wikibanned, wikicontributor)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/friend$"
    }
  },
  {
    "path": "/api/hide",
    "url": {
      "oauth": "https://oauth.reddit.com/api/hide",
      "standard": "https://ssl.reddit.com/api/hide"
    },
    "oauth": [
      "report"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Hide a link.\n\nThis removes it from the user's default view of subreddit listings.\n\nSee also: /api/unhide.",
    "args": {
      "id": {
        "describe": "fullname of a link"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/hide$"
    }
  },
  {
    "path": "/api/ignore_reports",
    "url": {
      "oauth": "https://oauth.reddit.com/api/ignore_reports",
      "standard": "https://ssl.reddit.com/api/ignore_reports"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Prevent future reports on a thing from causing notifications.\n\nAny reports made about a thing after this flag is set on it will not\ncause notifications or make the thing show up in the various moderation\nlistings.\n\nSee also: /api/unignore_reports.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/ignore_reports$"
    }
  },
  {
    "path": "/api/info",
    "url": {
      "oauth": "https://oauth.reddit.com/api/info",
      "standard": "https://www.reddit.com/api/info"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of things specified by their fullnames.\n\nOnly Links, Comments, and Subreddits are allowed.",
    "args": {
      "id": {
        "describe": "A comma-separated list of thing fullnames"
      },
      "url": {
        "describe": "a valid URL"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/info$"
    }
  },
  {
    "path": "/api/leavecontributor",
    "url": {
      "standard": "https://ssl.reddit.com/api/leavecontributor"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Abdicate approved submitter status in a subreddit.\n\nSee also: /api/friend.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/leavecontributor$"
    }
  },
  {
    "path": "/api/leavemoderator",
    "url": {
      "standard": "https://ssl.reddit.com/api/leavemoderator"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Abdicate moderator status in a subreddit.\n\nSee also: /api/friend.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/leavemoderator$"
    }
  },
  {
    "path": "/api/live/$thread/accept_contributor_invite",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/accept_contributor_invite",
      "standard": "https://ssl.reddit.com/api/live/$thread/accept_contributor_invite"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Accept a pending invitation to contribute to the thread.\n\nSee also: /api/live/thread/leave_contributor.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/accept_contributor_invite$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/close_thread",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/close_thread",
      "standard": "https://ssl.reddit.com/api/live/$thread/close_thread"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Permanently close the thread, disallowing future updates.\n\nRequires the close permission for this thread.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/close_thread$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/delete_update",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/delete_update",
      "standard": "https://ssl.reddit.com/api/live/$thread/delete_update"
    },
    "oauth": [
      "edit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Delete an update from the thread.\n\nRequires that specified update must have been authored by the user or\nthat you have the edit permission for this thread.\n\nSee also: /api/live/thread/update.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "id": {
        "describe": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/delete_update$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/edit",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/edit",
      "standard": "https://ssl.reddit.com/api/live/$thread/edit"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Configure the thread.\n\nRequires the settings permission for this thread.\n\nSee also: /live/thread/about.json.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "description": {
        "describe": "raw markdown text"
      },
      "nsfw": {
        "describe": "boolean value"
      },
      "resources": {
        "describe": "raw markdown text"
      },
      "title": {
        "describe": "a string no longer than 120 characters"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/edit$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/invite_contributor",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/invite_contributor",
      "standard": "https://ssl.reddit.com/api/live/$thread/invite_contributor"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Invite another user to contribute to the thread.\n\nRequires the manage permission for this thread.  If the recipient\naccepts the invite, they will be granted the permissions specified.\n\nSee also: /api/live/thread/accept_contributor_invite, and\n/api/live/thread/rm_contributor_invite.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "permissions": {
        "describe": "permission description e.g. +update,+edit,-manage"
      },
      "type": {
        "describe": "one of (liveupdate_contributor_invite, liveupdate_contributor)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/invite_contributor$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/leave_contributor",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/leave_contributor",
      "standard": "https://ssl.reddit.com/api/live/$thread/leave_contributor"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Abdicate contributorship of the thread.\n\nSee also: /api/live/thread/accept_contributor_invite, and\n/api/live/thread/invite_contributor.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/leave_contributor$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/report",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/report",
      "standard": "https://ssl.reddit.com/api/live/$thread/report"
    },
    "oauth": [
      "report"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Report the thread for violating the rules of reddit.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "type": {
        "describe": "one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/report$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/rm_contributor",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/rm_contributor",
      "standard": "https://ssl.reddit.com/api/live/$thread/rm_contributor"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Revoke another user's contributorship.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "id": {
        "describe": "fullname of a account"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/rm_contributor$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/rm_contributor_invite",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/rm_contributor_invite",
      "standard": "https://ssl.reddit.com/api/live/$thread/rm_contributor_invite"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Revoke an outstanding contributor invite.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "id": {
        "describe": "fullname of a account"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/rm_contributor_invite$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/set_contributor_permissions",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/set_contributor_permissions",
      "standard": "https://ssl.reddit.com/api/live/$thread/set_contributor_permissions"
    },
    "oauth": [
      "livemanage"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Change a contributor or contributor invite's permissions.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor and\n/api/live/thread/rm_contributor.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "permissions": {
        "describe": "permission description e.g. +update,+edit,-manage"
      },
      "type": {
        "describe": "one of (liveupdate_contributor_invite, liveupdate_contributor)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/set_contributor_permissions$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/strike_update",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/strike_update",
      "standard": "https://ssl.reddit.com/api/live/$thread/strike_update"
    },
    "oauth": [
      "edit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Strike (mark incorrect and cross out) the content of an update.\n\nRequires that specified update must have been authored by the user or\nthat you have the edit permission for this thread.\n\nSee also: /api/live/thread/update.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "id": {
        "describe": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/strike_update$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/$thread/update",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/$thread/update",
      "standard": "https://ssl.reddit.com/api/live/$thread/update"
    },
    "oauth": [
      "submit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Post an update to the thread.\n\nRequires the update permission for this thread.\n\nSee also: /api/live/thread/strike_update, and\n/api/live/thread/delete_update.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "body": {
        "describe": "raw markdown text"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/([^/]+)/update$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/api/live/create",
    "url": {
      "oauth": "https://oauth.reddit.com/api/live/create",
      "standard": "https://ssl.reddit.com/api/live/create"
    },
    "oauth": [
      "submit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Create a new live thread.\n\nOnce created, the initial settings can be modified with\n/api/live/thread/edit and new updates\ncan be posted with\n/api/live/thread/update.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "description": {
        "describe": "raw markdown text"
      },
      "nsfw": {
        "describe": "boolean value"
      },
      "resources": {
        "describe": "raw markdown text"
      },
      "title": {
        "describe": "a string no longer than 120 characters"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/live/create$"
    }
  },
  {
    "path": "/api/login",
    "url": {
      "standard": "https://ssl.reddit.com/api/login"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Log into an account.\n\nrem specifies whether or not the session cookie returned should last\nbeyond the current browser session (that is, if rem is True the\ncookie will have an explicit expiration far in the future indicating\nthat it is not a session cookie).",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "passwd": {
        "describe": "the user's password"
      },
      "rem": {
        "describe": "boolean value"
      },
      "user": {
        "describe": "a username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/login$"
    }
  },
  {
    "path": "/api/marknsfw",
    "url": {
      "oauth": "https://oauth.reddit.com/api/marknsfw",
      "standard": "https://ssl.reddit.com/api/marknsfw"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Mark a link NSFW.\n\nSee also: /api/unmarknsfw.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/marknsfw$"
    }
  },
  {
    "path": "/api/me.json",
    "url": {
      "standard": "https://www.reddit.com/api/me.json"
    },
    "oauth": [],
    "extensions": [],
    "method": "GET",
    "describe": "Get info about the currently authenticated user.\n\nResponse includes a modhash, karma, and new mail status.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/me.json$"
    }
  },
  {
    "path": "/api/morechildren",
    "url": {
      "oauth": "https://oauth.reddit.com/api/morechildren",
      "standard": "https://www.reddit.com/api/morechildren"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve additional comments omitted from a base comment tree.\n\nWhen a comment tree is rendered, the most relevant comments are\nselected for display first. Remaining comments are stubbed out with\n\"MoreComments\" links. This API call is used to retrieve the additional\ncomments represented by those stubs, up to 20 at a time.\n\nThe two core parameters required are link and children.  link is\nthe fullname of the link whose comments are being fetched. children\nis a comma-delimited list of comment ID36s that need to be fetched.\n\nIf id is passed, it should be the ID of the MoreComments object this\ncall is replacing. This is needed only for the HTML UI's purposes and\nis optional otherwise.\n\npv_hex is part of the reddit gold \"previous visits\" feature. It is\noptional and deprecated.\n\nNOTE: you may only make one request at a time to this API endpoint.\nHigher concurrency will result in an error being returned.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "children": {
        "describe": "a comma-delimited list of comment ID36s"
      },
      "id": {
        "describe": "(optional) id of the associated MoreChildren object"
      },
      "link_id": {
        "describe": "fullname of a thing"
      },
      "pv_hex": {
        "describe": "(optional) a previous-visits token"
      },
      "sort": {
        "describe": "one of (confidence, top, new, hot, controversial, old, random)"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/morechildren$"
    }
  },
  {
    "path": "/api/multi/$multipath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath",
      "standard": "https://ssl.reddit.com/api/multi/$multipath"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "DELETE",
    "describe": "Delete a multi.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/$multipath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath",
      "standard": "https://www.reddit.com/api/multi/$multipath"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Fetch a multi's data and subreddit list by name.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/$multipath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath",
      "standard": "https://ssl.reddit.com/api/multi/$multipath"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Create a multi. Responds with 409 Conflict if it already exists.",
    "args": {
      "model": {
        "describe": "json data:\n\n{\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`),\n}\n"
      },
      "multipath": {
        "describe": "multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/$multipath",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath",
      "standard": "https://ssl.reddit.com/api/multi/$multipath"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "PUT",
    "describe": "Create or update a multi.",
    "args": {
      "model": {
        "describe": "json data:\n\n{\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`),\n}\n"
      },
      "multipath": {
        "describe": "multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/$multipath/copy",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath/copy",
      "standard": "https://ssl.reddit.com/api/multi/$multipath/copy"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Copy a multi.\n\nResponds with 409 Conflict if the target already exists.\n\nA \"copied from ...\" line will automatically be appended to the\ndescription.",
    "args": {
      "from": {
        "describe": "multireddit url path"
      },
      "to": {
        "describe": "destination multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)/copy$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/$multipath/description",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath/description",
      "standard": "https://www.reddit.com/api/multi/$multipath/description"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get a multi's description.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)/description$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/$multipath/description",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath/description",
      "standard": "https://ssl.reddit.com/api/multi/$multipath/description"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "PUT",
    "describe": "Change a multi's markdown description.",
    "args": {
      "model": {
        "describe": "json data:\n\n{\n  \"body_md\": raw markdown text,\n}\n"
      },
      "multipath": {
        "describe": "multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)/description$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/$multipath/r/$srname",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath/r/$srname",
      "standard": "https://ssl.reddit.com/api/multi/$multipath/r/$srname"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "DELETE",
    "describe": "Remove a subreddit from a multi.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      },
      "srname": {
        "describe": "subreddit name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)/r/([^/]+)$"
    },
    "parameters": [
      "multipath",
      "srname"
    ]
  },
  {
    "path": "/api/multi/$multipath/r/$srname",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath/r/$srname",
      "standard": "https://www.reddit.com/api/multi/$multipath/r/$srname"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get data about a subreddit in a multi.",
    "args": {
      "multipath": {
        "describe": "multireddit url path"
      },
      "srname": {
        "describe": "subreddit name"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)/r/([^/]+)$"
    },
    "parameters": [
      "multipath",
      "srname"
    ]
  },
  {
    "path": "/api/multi/$multipath/r/$srname",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath/r/$srname",
      "standard": "https://ssl.reddit.com/api/multi/$multipath/r/$srname"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "PUT",
    "describe": "Add a subreddit to a multi.",
    "args": {
      "model": {
        "describe": "json data:\n\n{\n  \"name\": subreddit name,\n}\n"
      },
      "multipath": {
        "describe": "multireddit url path"
      },
      "srname": {
        "describe": "subreddit name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)/r/([^/]+)$"
    },
    "parameters": [
      "multipath",
      "srname"
    ]
  },
  {
    "path": "/api/multi/$multipath/rename",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/$multipath/rename",
      "standard": "https://ssl.reddit.com/api/multi/$multipath/rename"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Rename a multi.",
    "args": {
      "from": {
        "describe": "multireddit url path"
      },
      "to": {
        "describe": "destination multireddit url path"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/([^/]+)/rename$"
    },
    "parameters": [
      "multipath"
    ]
  },
  {
    "path": "/api/multi/mine",
    "url": {
      "oauth": "https://oauth.reddit.com/api/multi/mine",
      "standard": "https://www.reddit.com/api/multi/mine"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Fetch a list of multis belonging to the current user.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/multi/mine$"
    }
  },
  {
    "path": "/api/needs_captcha.json",
    "url": {
      "oauth": "https://oauth.reddit.com/api/needs_captcha.json",
      "standard": "https://www.reddit.com/api/needs_captcha.json"
    },
    "oauth": [
      "any"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Check whether CAPTCHAs are needed for API methods that define the\n\"captcha\" and \"iden\" parameters.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/needs_captcha.json$"
    }
  },
  {
    "path": "/api/new_captcha",
    "url": {
      "oauth": "https://oauth.reddit.com/api/new_captcha",
      "standard": "https://ssl.reddit.com/api/new_captcha"
    },
    "oauth": [
      "any"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Responds with an iden of a new CAPTCHA.\n\nUse this endpoint if a user cannot read a given CAPTCHA,\nand wishes to receive a new CAPTCHA.\n\nTo request the CAPTCHA image for an iden, use\n/captcha/iden.",
    "args": {
      "api_type": {
        "describe": "the string json"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/new_captcha$"
    }
  },
  {
    "path": "/api/read_all_messages",
    "url": {
      "oauth": "https://oauth.reddit.com/api/read_all_messages",
      "standard": "https://ssl.reddit.com/api/read_all_messages"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Queue up marking all messages for a user as read.\n\nThis may take some time, and returns 202 to acknowledge acceptance of\nthe request.",
    "args": {
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/read_all_messages$"
    }
  },
  {
    "path": "/api/read_message",
    "url": {
      "oauth": "https://oauth.reddit.com/api/read_message",
      "standard": "https://ssl.reddit.com/api/read_message"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "id": {
        "describe": "A comma-separated list of thing fullnames"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/read_message$"
    }
  },
  {
    "path": "/api/recommend/sr/$srnames",
    "url": {
      "oauth": "https://oauth.reddit.com/api/recommend/sr/$srnames",
      "standard": "https://www.reddit.com/api/recommend/sr/$srnames"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return subreddits recommended for the given subreddit(s).\n\nGets a list of subreddits recommended for srnames, filtering out any\nthat appear in the optional omit param.",
    "args": {
      "omit": {
        "describe": "comma-delimited list of subreddit names"
      },
      "srnames": {
        "describe": "comma-delimited list of subreddit names"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/recommend/sr/([^/]+)$"
    },
    "parameters": [
      "srnames"
    ]
  },
  {
    "path": "/api/register",
    "url": {
      "standard": "https://ssl.reddit.com/api/register"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Create a new account.\n\nrem specifies whether or not the session cookie returned should last\nbeyond the current browser session (that is, if rem is True the\ncookie will have an explicit expiration far in the future indicating\nthat it is not a session cookie).",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "captcha": {
        "describe": "the user's response to the CAPTCHA challenge"
      },
      "email": {
        "describe": ""
      },
      "iden": {
        "describe": "the identifier of the CAPTCHA challenge"
      },
      "passwd": {
        "describe": "the new password"
      },
      "passwd2": {
        "describe": "the password again (for verification)"
      },
      "rem": {
        "describe": "boolean value"
      },
      "user": {
        "describe": "a valid, unused, username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/register$"
    }
  },
  {
    "path": "/api/remove",
    "url": {
      "oauth": "https://oauth.reddit.com/api/remove",
      "standard": "https://ssl.reddit.com/api/remove"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Remove a link, comment, or modmail message.\n\nIf the thing is a link, it will be removed from all subreddit listings.\nIf the thing is a comment, it will be redacted and removed from all\nsubreddit comment listings.\n\nSee also: /api/approve.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "spam": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/remove$"
    }
  },
  {
    "path": "/api/removedeveloper",
    "url": {
      "standard": "https://ssl.reddit.com/api/removedeveloper"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "client_id": {
        "describe": "an app developed by the user"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/removedeveloper$"
    }
  },
  {
    "path": "/api/report",
    "url": {
      "oauth": "https://oauth.reddit.com/api/report",
      "standard": "https://ssl.reddit.com/api/report"
    },
    "oauth": [
      "report"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Report a link, comment or message.\n\nReporting a thing brings it to the attention of the subreddit's\nmoderators. Reporting a message sends it to a system for admin review.\n\nFor links and comments, the thing is implicitly hidden as well (see\n/api/hide for details).",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "other_reason": {
        "describe": "a string no longer than 100 characters"
      },
      "reason": {
        "describe": "a string no longer than 100 characters"
      },
      "thing_id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/report$"
    }
  },
  {
    "path": "/api/revokeapp",
    "url": {
      "standard": "https://ssl.reddit.com/api/revokeapp"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "client_id": {
        "describe": "an app"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/revokeapp$"
    }
  },
  {
    "path": "/api/save",
    "url": {
      "oauth": "https://oauth.reddit.com/api/save",
      "standard": "https://ssl.reddit.com/api/save"
    },
    "oauth": [
      "save"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Save a link or comment.\n\nSaved things are kept in the user's saved listing for later perusal.\n\nSee also: /api/unsave.",
    "args": {
      "category": {
        "describe": "a category name"
      },
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/save$"
    }
  },
  {
    "path": "/api/saved_categories.json",
    "url": {
      "oauth": "https://oauth.reddit.com/api/saved_categories.json",
      "standard": "https://www.reddit.com/api/saved_categories.json"
    },
    "oauth": [
      "save"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get a list of categories in which things are currently saved.\n\nSee also: /api/save.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/saved_categories.json$"
    }
  },
  {
    "path": "/api/search_reddit_names.json",
    "url": {
      "oauth": "https://oauth.reddit.com/api/search_reddit_names.json",
      "standard": "https://ssl.reddit.com/api/search_reddit_names.json"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "List subreddit names that begin with a query string.\n\nSubreddits whose names begin with query will be returned. If\ninclude_over_18 is false, subreddits with over-18 content\nrestrictions will be filtered from the results.",
    "args": {
      "include_over_18": {
        "describe": "boolean value"
      },
      "query": {
        "describe": "a string up to 50 characters long, consisting of printable characters."
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/search_reddit_names.json$"
    }
  },
  {
    "path": "/api/selectflair",
    "url": {
      "oauth": "https://oauth.reddit.com/api/selectflair",
      "standard": "https://ssl.reddit.com/api/selectflair"
    },
    "oauth": [
      "flair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_template_id": {
        "describe": ""
      },
      "link": {
        "describe": "a fullname of a link"
      },
      "name": {
        "describe": "a user by name"
      },
      "text": {
        "describe": "a string no longer than 64 characters"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/selectflair$"
    }
  },
  {
    "path": "/api/sendreplies",
    "url": {
      "oauth": "https://oauth.reddit.com/api/sendreplies",
      "standard": "https://ssl.reddit.com/api/sendreplies"
    },
    "oauth": [
      "edit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Enable or disable inbox replies for a link or comment.\n\nstate is a boolean that indicates whether you are enabling or\ndisabling inbox replies - true to enable, false to disable.",
    "args": {
      "id": {
        "describe": "fullname of a thing created by the user"
      },
      "state": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/sendreplies$"
    }
  },
  {
    "path": "/api/set_contest_mode",
    "url": {
      "oauth": "https://oauth.reddit.com/api/set_contest_mode",
      "standard": "https://ssl.reddit.com/api/set_contest_mode"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Set or unset \"contest mode\" for a link's comments.\n\nstate is a boolean that indicates whether you are enabling or\ndisabling contest mode - true to enable, false to disable.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "id": {
        "describe": "fullname of a thing"
      },
      "state": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/set_contest_mode$"
    }
  },
  {
    "path": "/api/set_force_https",
    "url": {
      "standard": "https://ssl.reddit.com/api/set_force_https"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Toggle HTTPS-only sessions, invalidating other sessions.\n\nA valid password (curpass) must be supplied.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "curpass": {
        "describe": "the user's current password"
      },
      "force_https": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/set_force_https$"
    }
  },
  {
    "path": "/api/set_subreddit_sticky",
    "url": {
      "oauth": "https://oauth.reddit.com/api/set_subreddit_sticky",
      "standard": "https://ssl.reddit.com/api/set_subreddit_sticky"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Set or unset a self-post as the sticky post in its subreddit.\n\nstate is a boolean that indicates whether to sticky or unsticky\nthis post - true to sticky, false to unsticky.\n\nNote that if another post was previously stickied, stickying a new\none will replace the previous one.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "id": {
        "describe": "fullname of a thing"
      },
      "state": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/set_subreddit_sticky$"
    }
  },
  {
    "path": "/api/setappicon",
    "url": {
      "standard": "https://ssl.reddit.com/api/setappicon"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "client_id": {
        "describe": "an app developed by the user"
      },
      "file": {
        "describe": "an icon (72x72)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/setappicon$"
    }
  },
  {
    "path": "/api/setflairenabled",
    "url": {
      "oauth": "https://oauth.reddit.com/api/setflairenabled",
      "standard": "https://ssl.reddit.com/api/setflairenabled"
    },
    "oauth": [
      "flair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_enabled": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/setflairenabled$"
    }
  },
  {
    "path": "/api/setpermissions",
    "url": {
      "standard": "https://ssl.reddit.com/api/setpermissions"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "permissions": {
        "describe": ""
      },
      "type": {
        "describe": ""
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/setpermissions$"
    }
  },
  {
    "path": "/api/site_admin",
    "url": {
      "oauth": "https://oauth.reddit.com/api/site_admin",
      "standard": "https://ssl.reddit.com/api/site_admin"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Create or configure a subreddit.\n\nIf sr is specified, the request will attempt to modify the specified\nsubreddit. If not, a subreddit with name name will be created.\n\nThis endpoint expects all values to be supplied on every request.  If\nmodifying a subset of options, it may be useful to get the current\nsettings from /about/edit.json\nfirst.\n\nFor backwards compatibility, description is the sidebar text and\npublic_description is the publicly visible subreddit description.\n\nMost of the parameters for this endpoint are identical to options\nvisible in the user interface and their meanings are best explained\nthere.\n\nSee also: /about/edit.json.",
    "args": {
      "allow_top": {
        "describe": "boolean value"
      },
      "api_type": {
        "describe": "the string json"
      },
      "collapse_deleted_comments": {
        "describe": "boolean value"
      },
      "comment_score_hide_mins": {
        "describe": "an integer between 0 and 1440 (default: 0)"
      },
      "css_on_cname": {
        "describe": "boolean value"
      },
      "description": {
        "describe": "raw markdown text"
      },
      "exclude_banned_modqueue": {
        "describe": "boolean value"
      },
      "header-title": {
        "describe": "a string no longer than 500 characters"
      },
      "lang": {
        "describe": "a valid IETF language tag (underscore separated)"
      },
      "link_type": {
        "describe": "one of (any, link, self)"
      },
      "name": {
        "describe": "subreddit name"
      },
      "over_18": {
        "describe": "boolean value"
      },
      "public_description": {
        "describe": "raw markdown text"
      },
      "public_traffic": {
        "describe": "boolean value"
      },
      "show_cname_sidebar": {
        "describe": "boolean value"
      },
      "show_media": {
        "describe": "boolean value"
      },
      "spam_comments": {
        "describe": "one of (low, high, all)"
      },
      "spam_links": {
        "describe": "one of (low, high, all)"
      },
      "spam_selfposts": {
        "describe": "one of (low, high, all)"
      },
      "sr": {
        "describe": "fullname of a thing"
      },
      "submit_link_label": {
        "describe": "a string no longer than 60 characters"
      },
      "submit_text": {
        "describe": "raw markdown text"
      },
      "submit_text_label": {
        "describe": "a string no longer than 60 characters"
      },
      "title": {
        "describe": "a string no longer than 100 characters"
      },
      "type": {
        "describe": "one of (public, private, restricted, gold_restricted, archived)"
      },
      "uh": {
        "describe": "a modhash"
      },
      "wiki_edit_age": {
        "describe": "an integer greater than 0 (default: 0)"
      },
      "wiki_edit_karma": {
        "describe": "an integer greater than 0 (default: 0)"
      },
      "wikimode": {
        "describe": "one of (disabled, modonly, anyone)"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/site_admin$"
    }
  },
  {
    "path": "/api/store_visits",
    "url": {
      "oauth": "https://oauth.reddit.com/api/store_visits",
      "standard": "https://ssl.reddit.com/api/store_visits"
    },
    "oauth": [
      "save"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Requires a subscription to reddit gold",
    "args": {
      "links": {
        "describe": "A comma-separated list of link fullnames"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/store_visits$"
    }
  },
  {
    "path": "/api/submit",
    "url": {
      "oauth": "https://oauth.reddit.com/api/submit",
      "standard": "https://ssl.reddit.com/api/submit"
    },
    "oauth": [
      "submit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Submit a link to a subreddit.\n\nSubmit will create a link or self-post in the subreddit sr with the\ntitle title. If kind is \"link\", then url is expected to be a\nvalid URL to link to. Otherwise, text, if present, will be the\nbody of the self-post.\n\nIf a link with the same URL has already been submitted to the specified\nsubreddit an error will be returned unless resubmit is true.\nextension is used for determining which view-type (e.g. json,\ncompact etc.) to use for the redirect that is generated if the\nresubmit error occurs.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "captcha": {
        "describe": "the user's response to the CAPTCHA challenge"
      },
      "extension": {
        "describe": "extension used for redirects"
      },
      "iden": {
        "describe": "the identifier of the CAPTCHA challenge"
      },
      "kind": {
        "describe": "one of (link, self)"
      },
      "resubmit": {
        "describe": "boolean value"
      },
      "sendreplies": {
        "describe": "boolean value"
      },
      "sr": {
        "describe": "name of a subreddit"
      },
      "text": {
        "describe": "raw markdown text"
      },
      "then": {
        "describe": "one of (tb, comments)"
      },
      "title": {
        "describe": "title of the submission. up to 300 characters long"
      },
      "uh": {
        "describe": "a modhash"
      },
      "url": {
        "describe": "a valid URL"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/submit$"
    }
  },
  {
    "path": "/api/submit_text.json",
    "url": {
      "oauth": "https://oauth.reddit.com/api/submit_text.json",
      "standard": "https://www.reddit.com/api/submit_text.json"
    },
    "oauth": [
      "submit"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get the submission text for the subreddit.\n\nThis text is set by the subreddit moderators and intended to be\ndisplayed on the submission form.\n\nSee also: /api/site_admin.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/submit_text.json$"
    }
  },
  {
    "path": "/api/subreddits_by_topic.json",
    "url": {
      "oauth": "https://oauth.reddit.com/api/subreddits_by_topic.json",
      "standard": "https://www.reddit.com/api/subreddits_by_topic.json"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a list of subreddits that are relevant to a search query.",
    "args": {
      "query": {
        "describe": "a string no longer than 50 characters"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/subreddits_by_topic.json$"
    }
  },
  {
    "path": "/api/subscribe",
    "url": {
      "oauth": "https://oauth.reddit.com/api/subscribe",
      "standard": "https://ssl.reddit.com/api/subscribe"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Subscribe to or unsubscribe from a subreddit.\n\nTo subscribe, action should be sub. To unsubscribe, action should\nbe unsub. The user must have access to the subreddit to be able to\nsubscribe to it.\n\nSee also: /subreddits/mine/.",
    "args": {
      "action": {
        "describe": "one of (sub, unsub)"
      },
      "sr": {
        "describe": "the fullname of a subreddit"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/subscribe$"
    }
  },
  {
    "path": "/api/unblock_subreddit",
    "url": {
      "oauth": "https://oauth.reddit.com/api/unblock_subreddit",
      "standard": "https://ssl.reddit.com/api/unblock_subreddit"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/unblock_subreddit$"
    }
  },
  {
    "path": "/api/unfriend",
    "url": {
      "standard": "https://ssl.reddit.com/api/unfriend"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Handles removal of a friend (a user-user relation) or removal\nof a user's privileges from a subreddit (a user-subreddit\nrelation).  The user can either be passed in by name (nuser)\nor by fullname (iuser).  If type is friend or enemy, 'container'\nwill be the current user, otherwise the subreddit must be set.",
    "args": {
      "container": {
        "describe": ""
      },
      "id": {
        "describe": "fullname of a thing"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "type": {
        "describe": "one of (friend, enemy, moderator, moderator_invite, contributor, banned, wikibanned, wikicontributor)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/unfriend$"
    }
  },
  {
    "path": "/api/unhide",
    "url": {
      "oauth": "https://oauth.reddit.com/api/unhide",
      "standard": "https://ssl.reddit.com/api/unhide"
    },
    "oauth": [
      "report"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Unhide a link.\n\nSee also: /api/hide.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/unhide$"
    }
  },
  {
    "path": "/api/unignore_reports",
    "url": {
      "oauth": "https://oauth.reddit.com/api/unignore_reports",
      "standard": "https://ssl.reddit.com/api/unignore_reports"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Allow future reports on a thing to cause notifications.\n\nSee also: /api/ignore_reports.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/unignore_reports$"
    }
  },
  {
    "path": "/api/unmarknsfw",
    "url": {
      "oauth": "https://oauth.reddit.com/api/unmarknsfw",
      "standard": "https://ssl.reddit.com/api/unmarknsfw"
    },
    "oauth": [
      "modposts"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Remove the NSFW marking from a link.\n\nSee also: /api/marknsfw.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/unmarknsfw$"
    }
  },
  {
    "path": "/api/unread_message",
    "url": {
      "oauth": "https://oauth.reddit.com/api/unread_message",
      "standard": "https://ssl.reddit.com/api/unread_message"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "id": {
        "describe": "A comma-separated list of thing fullnames"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/unread_message$"
    }
  },
  {
    "path": "/api/unsave",
    "url": {
      "oauth": "https://oauth.reddit.com/api/unsave",
      "standard": "https://ssl.reddit.com/api/unsave"
    },
    "oauth": [
      "save"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Unsave a link or comment.\n\nThis removes the thing from the user's saved listings as well.\n\nSee also: /api/save.",
    "args": {
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/unsave$"
    }
  },
  {
    "path": "/api/update",
    "url": {
      "standard": "https://ssl.reddit.com/api/update"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Update account email address and password.\n\nCalled by /prefs/update on the site. For frontend form verification\npurposes, newpass and verpass must be equal for a password change\nto succeed.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "curpass": {
        "describe": ""
      },
      "dest": {
        "describe": "destination url (must be same-domain)"
      },
      "email": {
        "describe": ""
      },
      "newpass": {
        "describe": "the new password"
      },
      "uh": {
        "describe": "a modhash"
      },
      "verify": {
        "describe": "boolean value"
      },
      "verpass": {
        "describe": "the password again (for verification)"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/update$"
    }
  },
  {
    "path": "/api/update_email",
    "url": {
      "standard": "https://ssl.reddit.com/api/update_email"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Update account email address.\n\nCalled by /prefs/update on the site.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "curpass": {
        "describe": ""
      },
      "dest": {
        "describe": "destination url (must be same-domain)"
      },
      "email": {
        "describe": ""
      },
      "uh": {
        "describe": "a modhash"
      },
      "verify": {
        "describe": "boolean value"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/update_email$"
    }
  },
  {
    "path": "/api/update_password",
    "url": {
      "standard": "https://ssl.reddit.com/api/update_password"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Update account password.\n\nCalled by /prefs/update on the site. For frontend form verification\npurposes, newpass and verpass must be equal for a password change\nto succeed.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "curpass": {
        "describe": ""
      },
      "newpass": {
        "describe": "the new password"
      },
      "uh": {
        "describe": "a modhash"
      },
      "verpass": {
        "describe": "the password again (for verification)"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/update_password$"
    }
  },
  {
    "path": "/api/updateapp",
    "url": {
      "standard": "https://ssl.reddit.com/api/updateapp"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "about_url": {
        "describe": "a valid URL"
      },
      "api_type": {
        "describe": "the string json"
      },
      "app_type": {
        "describe": "one of (web, installed, script)"
      },
      "icon_url": {
        "describe": "a valid URL"
      },
      "name": {
        "describe": "a name for the app"
      },
      "redirect_uri": {
        "describe": "a valid URI"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/updateapp$"
    }
  },
  {
    "path": "/api/upload_sr_img",
    "url": {
      "oauth": "https://oauth.reddit.com/api/upload_sr_img",
      "standard": "https://ssl.reddit.com/api/upload_sr_img"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Add or replace a subreddit image or custom header logo.\n\nIf the header value is 0, an image for use in the subreddit\nstylesheet is uploaded with the name specified in name. If the value\nof header is 1 then the image uploaded will be the subreddit's new\nlogo and name will be ignored.\n\nThe img_type field specifies whether to store the uploaded image as a\nPNG or JPEG.\n\nSubreddits have a limited number of images that can be in use at any\ngiven time. If no image with the specified name already exists, one of\nthe slots will be consumed.\n\nIf an image with the specified name already exists, it will be\nreplaced.  This does not affect the stylesheet immediately, but will\ntake effect the next time the stylesheet is saved.\n\nSee also: /api/delete_sr_img and\n/api/delete_sr_header.",
    "args": {
      "file": {
        "describe": "file upload with maximum size of 500 KiB"
      },
      "formid": {
        "describe": "(optional) can be ignored"
      },
      "header": {
        "describe": "an integer between 0 and 1"
      },
      "img_type": {
        "describe": "one of png or jpg (default: png)"
      },
      "name": {
        "describe": "a valid subreddit image name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/upload_sr_img$"
    }
  },
  {
    "path": "/api/username_available.json",
    "url": {
      "standard": "https://www.reddit.com/api/username_available.json"
    },
    "oauth": [],
    "extensions": [],
    "method": "GET",
    "describe": "Check whether a username is available for registration.",
    "args": {
      "user": {
        "describe": "a valid, unused, username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/username_available.json$"
    }
  },
  {
    "path": "/api/v1/gold/gild/$fullname",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/gold/gild/$fullname",
      "standard": "https://ssl.reddit.com/api/v1/gold/gild/$fullname"
    },
    "oauth": [
      "creddits"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "fullname": {
        "describe": "fullname of a thing"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/gold/gild/([^/]+)$"
    },
    "parameters": [
      "fullname"
    ]
  },
  {
    "path": "/api/v1/gold/give/$username",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/gold/give/$username",
      "standard": "https://ssl.reddit.com/api/v1/gold/give/$username"
    },
    "oauth": [
      "creddits"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "months": {
        "describe": "an integer between 1 and 36"
      },
      "username": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/gold/give/([^/]+)$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/api/v1/me",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me",
      "standard": "https://www.reddit.com/api/v1/me"
    },
    "oauth": [
      "identity"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Returns the identity of the user currently authenticated via OAuth.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me$"
    }
  },
  {
    "path": "/api/v1/me/blocked",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/blocked",
      "standard": "https://www.reddit.com/api/v1/me/blocked"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/blocked$"
    }
  },
  {
    "path": "/api/v1/me/friends",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/friends",
      "standard": "https://www.reddit.com/api/v1/me/friends"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/friends$"
    }
  },
  {
    "path": "/api/v1/me/friends/$username",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/friends/$username",
      "standard": "https://ssl.reddit.com/api/v1/me/friends/$username"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "DELETE",
    "describe": "Stop being friends with a user.",
    "args": {
      "username": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/friends/([^/]+)$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/api/v1/me/friends/$username",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/friends/$username",
      "standard": "https://www.reddit.com/api/v1/me/friends/$username"
    },
    "oauth": [
      "mysubreddits"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get information about a specific 'friend', such as notes.",
    "args": {
      "username": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/friends/([^/]+)$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/api/v1/me/friends/$username",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/friends/$username",
      "standard": "https://ssl.reddit.com/api/v1/me/friends/$username"
    },
    "oauth": [
      "subscribe"
    ],
    "extensions": [],
    "method": "PUT",
    "describe": "Create or update a \"friend\" relationship.\n\nThis operation is idempotent. It can be used to add a new\nfriend, or update an existing friend (e.g., add/change the\nnote on that friend)",
    "args": {
      "This": {
        "describe": "{\n  \"name\": A valid, existing reddit username,\n  \"note\": a string no longer than 300 characters,\n}\n"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/friends/([^/]+)$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/api/v1/me/karma",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/karma",
      "standard": "https://www.reddit.com/api/v1/me/karma"
    },
    "oauth": [
      "mysubreddits"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a breakdown of subreddit karma.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/karma$"
    }
  },
  {
    "path": "/api/v1/me/prefs",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/prefs",
      "standard": "https://www.reddit.com/api/v1/me/prefs"
    },
    "oauth": [
      "identity"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return the preference settings of the logged in user",
    "args": {
      "fields": {
        "describe": "A comma-separated list of items from this set:\n\nthreaded_messages\nhide_downs\nemail_messages\nframe\nshow_link_flair\ncreddit_autorenew\nshow_trending\nprivate_feeds\nmonitor_mentions\nresearch\nmedia\nshow_sponsors\nclickgadget\nuse_global_defaults\nlabel_nsfw\ndomain_details\nshow_stylesheets\nhighlight_controversial\nno_profanity\nover_18\nlang\nhide_ups\nhide_from_robots\ncompress\nstore_visits\nmin_link_score\nshow_promote\nmin_comment_score\npublic_votes\norganic\ncollapse_read_messages\nshow_flair\nmark_messages_read\nshow_sponsorships\nshow_adbox\nnewwindow\nnumsites\nnum_comments\nhighlight_new_comments\nhide_locationbar"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/prefs$"
    }
  },
  {
    "path": "/api/v1/me/prefs",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/prefs",
      "standard": "https://ssl.reddit.com/api/v1/me/prefs"
    },
    "oauth": [
      "account"
    ],
    "extensions": [],
    "method": "PATCH",
    "describe": "",
    "args": {
      "This": {
        "describe": "{\n  \"clickgadget\": boolean value,\n  \"collapse_read_messages\": boolean value,\n  \"compress\": boolean value,\n  \"creddit_autorenew\": boolean value,\n  \"domain_details\": boolean value,\n  \"email_messages\": boolean value,\n  \"frame\": boolean value,\n  \"hide_downs\": boolean value,\n  \"hide_from_robots\": boolean value,\n  \"hide_locationbar\": boolean value,\n  \"hide_ups\": boolean value,\n  \"highlight_controversial\": boolean value,\n  \"highlight_new_comments\": boolean value,\n  \"label_nsfw\": boolean value,\n  \"lang\": a valid IETF language tag (underscore separated),\n  \"mark_messages_read\": boolean value,\n  \"media\": one of (`on`, `off`, `subreddit`),\n  \"min_comment_score\": an integer between -100 and 100,\n  \"min_link_score\": an integer between -100 and 100,\n  \"monitor_mentions\": boolean value,\n  \"newwindow\": boolean value,\n  \"no_profanity\": boolean value,\n  \"num_comments\": an integer between 1 and 500,\n  \"numsites\": an integer between 1 and 100,\n  \"organic\": boolean value,\n  \"over_18\": boolean value,\n  \"private_feeds\": boolean value,\n  \"public_votes\": boolean value,\n  \"research\": boolean value,\n  \"show_adbox\": boolean value,\n  \"show_flair\": boolean value,\n  \"show_link_flair\": boolean value,\n  \"show_promote\": boolean value,\n  \"show_sponsors\": boolean value,\n  \"show_sponsorships\": boolean value,\n  \"show_stylesheets\": boolean value,\n  \"show_trending\": boolean value,\n  \"store_visits\": boolean value,\n  \"threaded_messages\": boolean value,\n  \"use_global_defaults\": boolean value,\n}\n"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/prefs$"
    }
  },
  {
    "path": "/api/v1/me/trophies",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/me/trophies",
      "standard": "https://www.reddit.com/api/v1/me/trophies"
    },
    "oauth": [
      "identity"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a list of trophies for the current user.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/me/trophies$"
    }
  },
  {
    "path": "/api/v1/user/$username/trophies",
    "url": {
      "oauth": "https://oauth.reddit.com/api/v1/user/$username/trophies",
      "standard": "https://www.reddit.com/api/v1/user/$username/trophies"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a list of trophies for the a given user.",
    "args": {
      "username": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/v1/user/([^/]+)/trophies$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/api/vote",
    "url": {
      "oauth": "https://oauth.reddit.com/api/vote",
      "standard": "https://ssl.reddit.com/api/vote"
    },
    "oauth": [
      "vote"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Cast a vote on a thing.\n\nid should be the fullname of the Link or Comment to vote on.\n\ndir indicates the direction of the vote. Voting 1 is an upvote,\n-1 is a downvote, and 0 is equivalent to \"un-voting\" by clicking\nagain on a highlighted arrow.\n\nNote: votes must be cast by humans. That is, API clients proxying a\nhuman's action one-for-one are OK, but bots deciding how to vote on\ncontent or amplifying a human's vote are not. See the reddit\nrules for more details on what constitutes vote cheating.",
    "args": {
      "dir": {
        "describe": "vote direction. one of (1, 0, -1)"
      },
      "id": {
        "describe": "fullname of a thing"
      },
      "uh": {
        "describe": "a modhash"
      },
      "v": {
        "describe": "(optional) internal use only"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/vote$"
    }
  },
  {
    "path": "/api/wiki/alloweditor/$act",
    "url": {
      "oauth": "https://oauth.reddit.com/api/wiki/alloweditor/$act",
      "standard": "https://ssl.reddit.com/api/wiki/alloweditor/$act"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Allow/deny username to edit this wiki page",
    "args": {
      "act": {
        "describe": "one of (del, add)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "uh": {
        "describe": "a modhash"
      },
      "username": {
        "describe": "the name of an existing user"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/wiki/alloweditor/([^/]+)$"
    },
    "parameters": [
      "act"
    ]
  },
  {
    "path": "/api/wiki/alloweditor/add",
    "url": {
      "oauth": "https://oauth.reddit.com/api/wiki/alloweditor/add",
      "standard": "https://ssl.reddit.com/api/wiki/alloweditor/add"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Allow/deny username to edit this wiki page",
    "args": {
      "act": {
        "describe": "one of (del, add)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "uh": {
        "describe": "a modhash"
      },
      "username": {
        "describe": "the name of an existing user"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/wiki/alloweditor/add$"
    }
  },
  {
    "path": "/api/wiki/alloweditor/del",
    "url": {
      "oauth": "https://oauth.reddit.com/api/wiki/alloweditor/del",
      "standard": "https://ssl.reddit.com/api/wiki/alloweditor/del"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Allow/deny username to edit this wiki page",
    "args": {
      "act": {
        "describe": "one of (del, add)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "uh": {
        "describe": "a modhash"
      },
      "username": {
        "describe": "the name of an existing user"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/wiki/alloweditor/del$"
    }
  },
  {
    "path": "/api/wiki/edit",
    "url": {
      "oauth": "https://oauth.reddit.com/api/wiki/edit",
      "standard": "https://ssl.reddit.com/api/wiki/edit"
    },
    "oauth": [
      "wikiedit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Edit a wiki page",
    "args": {
      "content": {
        "describe": ""
      },
      "page": {
        "describe": "the name of an existing page or a new page to create"
      },
      "previous": {
        "describe": "the starting point revision for this edit"
      },
      "reason": {
        "describe": "a string up to 256 characters long, consisting of printable characters."
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/wiki/edit$"
    }
  },
  {
    "path": "/api/wiki/hide",
    "url": {
      "oauth": "https://oauth.reddit.com/api/wiki/hide",
      "standard": "https://ssl.reddit.com/api/wiki/hide"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Toggle the public visibility of a wiki page revision",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "revision": {
        "describe": "a wiki revision ID"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/wiki/hide$"
    }
  },
  {
    "path": "/api/wiki/revert",
    "url": {
      "oauth": "https://oauth.reddit.com/api/wiki/revert",
      "standard": "https://ssl.reddit.com/api/wiki/revert"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Revert a wiki page to revision",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "revision": {
        "describe": "a wiki revision ID"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/api/wiki/revert$"
    }
  },
  {
    "path": "/by_id/$names",
    "url": {
      "oauth": "https://oauth.reddit.com/by_id/$names",
      "standard": "https://www.reddit.com/by_id/$names"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get a listing of links by fullname.\n\nnames is a list of fullnames for links separated by commas or spaces.",
    "args": {
      "names": {
        "describe": "A comma-separated list of link fullnames"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/by_id/([^/]+)$"
    },
    "parameters": [
      "names"
    ]
  },
  {
    "path": "/captcha/$iden",
    "url": {
      "oauth": "https://oauth.reddit.com/captcha/$iden",
      "standard": "https://www.reddit.com/captcha/$iden"
    },
    "oauth": [
      "any"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Request a CAPTCHA image given an iden.\n\nAn iden is given as the captcha field with a BAD_CAPTCHA\nerror, you should use this endpoint if you get a\nBAD_CAPTCHA error response.\n\nResponds with a 120x50 image/png which should be displayed\nto the user.\n\nThe user's response to the CAPTCHA should be sent as captcha\nalong with your request.\n\nTo request a new CAPTCHA,\nuse /api/new_captcha.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/captcha/([^/]+)$"
    },
    "parameters": [
      "iden"
    ]
  },
  {
    "path": "/comments/$article",
    "url": {
      "oauth": "https://oauth.reddit.com/comments/$article",
      "standard": "https://www.reddit.com/comments/$article"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get the comment tree for a given Link article.\n\nIf supplied, comment is the ID36 of a comment in the comment tree for\narticle. This comment will be the (highlighted) focal point of the\nreturned view and context will be the number of parents shown.\n\ndepth is the maximum depth of subtrees in the thread.\n\nlimit is the maximum number of comments to return.\n\nSee also: /api/morechildren and\n/api/comment.",
    "args": {
      "article": {
        "describe": "ID36 of a link"
      },
      "comment": {
        "describe": "(optional) ID36 of a comment"
      },
      "context": {
        "describe": "an integer between 0 and 8"
      },
      "depth": {
        "describe": "(optional) an integer"
      },
      "limit": {
        "describe": "(optional) an integer"
      },
      "sort": {
        "describe": "one of (confidence, top, new, hot, controversial, old, random)"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/comments/([^/]+)$"
    },
    "parameters": [
      "article"
    ]
  },
  {
    "path": "/controversial",
    "url": {
      "oauth": "https://oauth.reddit.com/controversial",
      "standard": "https://www.reddit.com/controversial"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/controversial$"
    }
  },
  {
    "path": "/hot",
    "url": {
      "oauth": "https://oauth.reddit.com/hot",
      "standard": "https://www.reddit.com/hot"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/hot$"
    }
  },
  {
    "path": "/live/$thread",
    "url": {
      "oauth": "https://oauth.reddit.com/live/$thread",
      "standard": "https://www.reddit.com/live/$thread"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get a list of updates posted in this thread.\n\nSee also: /api/live/thread/update.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
      },
      "before": {
        "describe": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "is_embed": {
        "describe": "(internal use only)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "stylesr": {
        "describe": "subreddit name"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/live/([^/]+)$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/live/$thread/about.json",
    "url": {
      "oauth": "https://oauth.reddit.com/live/$thread/about.json",
      "standard": "https://www.reddit.com/live/$thread/about.json"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get some basic information about the live thread.\n\nSee also: /api/live/thread/edit.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/live/([^/]+)/about.json$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/live/$thread/contributors.json",
    "url": {
      "oauth": "https://oauth.reddit.com/live/$thread/contributors.json",
      "standard": "https://www.reddit.com/live/$thread/contributors.json"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get a list of users that contribute to this thread.\n\nSee also: /api/live/thread/invite_contributor, and\n/api/live/thread/rm_contributor.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/live/([^/]+)/contributors.json$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/live/$thread/discussions",
    "url": {
      "oauth": "https://oauth.reddit.com/live/$thread/discussions",
      "standard": "https://www.reddit.com/live/$thread/discussions"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get a list of reddit submissions linking to this thread.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/live/([^/]+)/discussions$"
    },
    "parameters": [
      "thread"
    ]
  },
  {
    "path": "/message/$where",
    "url": {
      "oauth": "https://oauth.reddit.com/message/$where",
      "standard": "https://www.reddit.com/message/$where"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "mark": {
        "describe": "one of (true, false)"
      },
      "mid": {
        "describe": ""
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/message/([^/]+)$"
    },
    "parameters": [
      "where"
    ]
  },
  {
    "path": "/message/inbox",
    "url": {
      "oauth": "https://oauth.reddit.com/message/inbox",
      "standard": "https://www.reddit.com/message/inbox"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "mark": {
        "describe": "one of (true, false)"
      },
      "mid": {
        "describe": ""
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/message/inbox$"
    }
  },
  {
    "path": "/message/sent",
    "url": {
      "oauth": "https://oauth.reddit.com/message/sent",
      "standard": "https://www.reddit.com/message/sent"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "mark": {
        "describe": "one of (true, false)"
      },
      "mid": {
        "describe": ""
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/message/sent$"
    }
  },
  {
    "path": "/message/unread",
    "url": {
      "oauth": "https://oauth.reddit.com/message/unread",
      "standard": "https://www.reddit.com/message/unread"
    },
    "oauth": [
      "privatemessages"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "mark": {
        "describe": "one of (true, false)"
      },
      "mid": {
        "describe": ""
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/message/unread$"
    }
  },
  {
    "path": "/new",
    "url": {
      "oauth": "https://oauth.reddit.com/new",
      "standard": "https://www.reddit.com/new"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/new$"
    }
  },
  {
    "path": "/prefs/$where",
    "url": {
      "oauth": "https://oauth.reddit.com/prefs/$where",
      "standard": "https://www.reddit.com/prefs/$where"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/prefs/([^/]+)$"
    },
    "parameters": [
      "where"
    ]
  },
  {
    "path": "/prefs/blocked",
    "url": {
      "oauth": "https://oauth.reddit.com/prefs/blocked",
      "standard": "https://www.reddit.com/prefs/blocked"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/prefs/blocked$"
    }
  },
  {
    "path": "/prefs/friends",
    "url": {
      "oauth": "https://oauth.reddit.com/prefs/friends",
      "standard": "https://www.reddit.com/prefs/friends"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/prefs/friends$"
    }
  },
  {
    "path": "/r/$subreddit/$sort",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/$sort",
      "standard": "https://www.reddit.com/r/$subreddit/$sort"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "sort"
    ]
  },
  {
    "path": "/r/$subreddit/about.json",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about.json",
      "standard": "https://www.reddit.com/r/$subreddit/about.json"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return information about the subreddit.\n\nData includes the subscriber count, description, and header image.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about.json$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/$location",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/$location",
      "standard": "https://www.reddit.com/r/$subreddit/about/$location"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "location"
    ]
  },
  {
    "path": "/r/$subreddit/about/$where",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/$where",
      "standard": "https://www.reddit.com/r/$subreddit/about/$where"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "where"
    ]
  },
  {
    "path": "/r/$subreddit/about/banned",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/banned",
      "standard": "https://www.reddit.com/r/$subreddit/about/banned"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/banned$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/contributors",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/contributors",
      "standard": "https://www.reddit.com/r/$subreddit/about/contributors"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/contributors$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/edit.json",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/edit.json",
      "standard": "https://www.reddit.com/r/$subreddit/about/edit.json"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get the current settings of a subreddit.\n\nIn the API, this returns the current settings of the subreddit as used\nby /api/site_admin.  On the HTML site, it will\ndisplay a form for editing the subreddit.",
    "args": {
      "created": {
        "describe": "one of (true, false)"
      },
      "location": {
        "describe": ""
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/edit.json$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/edited",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/edited",
      "standard": "https://www.reddit.com/r/$subreddit/about/edited"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/edited$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/log",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/log",
      "standard": "https://www.reddit.com/r/$subreddit/about/log"
    },
    "oauth": [
      "modlog"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get a list of recent moderation actions.\n\nModerator actions taken within a subreddit are logged. This listing is\na view of that log with various filters to aid in analyzing the\ninformation.\n\nThe optional mod parameter can be a comma-delimited list of moderator\nnames to restrict the results to, or the string a to restrict the\nresults to admin actions taken within the subreddit.\n\nThe type parameter is optional and if sent limits the log entries\nreturned to only those of the type specified.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 500)"
      },
      "mod": {
        "describe": "(optional) a moderator filter"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "type": {
        "describe": "one of (banuser, unbanuser, removelink, approvelink, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, sticky, unsticky)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/log$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/moderators",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/moderators",
      "standard": "https://www.reddit.com/r/$subreddit/about/moderators"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/moderators$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/modqueue",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/modqueue",
      "standard": "https://www.reddit.com/r/$subreddit/about/modqueue"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/modqueue$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/reports",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/reports",
      "standard": "https://www.reddit.com/r/$subreddit/about/reports"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/reports$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/spam",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/spam",
      "standard": "https://www.reddit.com/r/$subreddit/about/spam"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/spam$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/unmoderated",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/unmoderated",
      "standard": "https://www.reddit.com/r/$subreddit/about/unmoderated"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "location": {
        "describe": ""
      },
      "only": {
        "describe": "one of (links, comments)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/unmoderated$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/wikibanned",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/wikibanned",
      "standard": "https://www.reddit.com/r/$subreddit/about/wikibanned"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/wikibanned$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/about/wikicontributors",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/about/wikicontributors",
      "standard": "https://www.reddit.com/r/$subreddit/about/wikicontributors"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "user": {
        "describe": "A valid, existing reddit username"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/about/wikicontributors$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/accept_moderator_invite",
    "url": {
      "standard": "https://ssl.reddit.com/r/$subreddit/api/accept_moderator_invite"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "Accept an invite to moderate the specified subreddit.\n\nThe authenticated user must have been invited to moderate the subreddit\nby one of its current moderators.\n\nSee also: /api/friend and\n/subreddits/mine.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/accept_moderator_invite$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/clearflairtemplates",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/clearflairtemplates",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/clearflairtemplates"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_type": {
        "describe": "one of (USER_FLAIR, LINK_FLAIR)"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/clearflairtemplates$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/delete_sr_header",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/delete_sr_header",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/delete_sr_header"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Remove the subreddit's custom header image.\n\nThe sitewide-default header image will be shown again after this call.\n\nSee also: /api/upload_sr_img.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/delete_sr_header$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/delete_sr_img",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/delete_sr_img",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/delete_sr_img"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Remove an image from the subreddit's custom image set.\n\nThe image will no longer count against the subreddit's image limit.\nHowever, the actual image data may still be accessible for an\nunspecified amount of time. If the image is currently referenced by the\nsubreddit's stylesheet, that stylesheet will no longer validate and\nwon't be editable until the image reference is removed.\n\nSee also: /api/upload_sr_img.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "img_name": {
        "describe": "a valid subreddit image name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/delete_sr_img$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/deleteflair",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/deleteflair",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/deleteflair"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "name": {
        "describe": "a user by name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/deleteflair$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/deleteflairtemplate",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/deleteflairtemplate",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/deleteflairtemplate"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_template_id": {
        "describe": ""
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/deleteflairtemplate$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/flair",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/flair",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/flair"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "css_class": {
        "describe": "a valid subreddit image name"
      },
      "link": {
        "describe": "a fullname of a link"
      },
      "name": {
        "describe": "a user by name"
      },
      "text": {
        "describe": "a string no longer than 64 characters"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/flair$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/flairconfig",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/flairconfig",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/flairconfig"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_enabled": {
        "describe": "boolean value"
      },
      "flair_position": {
        "describe": "one of (left, right)"
      },
      "flair_self_assign_enabled": {
        "describe": "boolean value"
      },
      "link_flair_position": {
        "describe": "one of (`,left,right`)"
      },
      "link_flair_self_assign_enabled": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/flairconfig$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/flaircsv",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/flaircsv",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/flaircsv"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "flair_csv": {
        "describe": ""
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/flaircsv$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/flairlist",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/flairlist",
      "standard": "https://www.reddit.com/r/$subreddit/api/flairlist"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 1000)"
      },
      "name": {
        "describe": "a user by name"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/flairlist$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/flairselector",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/flairselector",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/flairselector"
    },
    "oauth": [
      "flair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Return information about a users's flair options.\n\nIf link is given, return link flair options.\nOtherwise, return user flair options for this subreddit.\n\nThe signed in user's flair is also returned.\nSubreddit moderators may give a user by name to instead\nretrieve that user's flair.",
    "args": {
      "link": {
        "describe": "a fullname of a link"
      },
      "name": {
        "describe": "a user by name"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/flairselector$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/flairtemplate",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/flairtemplate",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/flairtemplate"
    },
    "oauth": [
      "modflair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "css_class": {
        "describe": "a valid subreddit image name"
      },
      "flair_template_id": {
        "describe": ""
      },
      "flair_type": {
        "describe": "one of (USER_FLAIR, LINK_FLAIR)"
      },
      "text": {
        "describe": "a string no longer than 64 characters"
      },
      "text_editable": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/flairtemplate$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/info",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/info",
      "standard": "https://www.reddit.com/r/$subreddit/api/info"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return a listing of things specified by their fullnames.\n\nOnly Links, Comments, and Subreddits are allowed.",
    "args": {
      "id": {
        "describe": "A comma-separated list of thing fullnames"
      },
      "url": {
        "describe": "a valid URL"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/info$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/selectflair",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/selectflair",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/selectflair"
    },
    "oauth": [
      "flair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_template_id": {
        "describe": ""
      },
      "link": {
        "describe": "a fullname of a link"
      },
      "name": {
        "describe": "a user by name"
      },
      "text": {
        "describe": "a string no longer than 64 characters"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/selectflair$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/setflairenabled",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/setflairenabled",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/setflairenabled"
    },
    "oauth": [
      "flair"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "flair_enabled": {
        "describe": "boolean value"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/setflairenabled$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/setpermissions",
    "url": {
      "standard": "https://ssl.reddit.com/r/$subreddit/api/setpermissions"
    },
    "oauth": [],
    "extensions": [],
    "method": "POST",
    "describe": "",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "name": {
        "describe": "the name of an existing user"
      },
      "permissions": {
        "describe": ""
      },
      "type": {
        "describe": ""
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/setpermissions$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/submit_text.json",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/submit_text.json",
      "standard": "https://www.reddit.com/r/$subreddit/api/submit_text.json"
    },
    "oauth": [
      "submit"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Get the submission text for the subreddit.\n\nThis text is set by the subreddit moderators and intended to be\ndisplayed on the submission form.\n\nSee also: /api/site_admin.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/submit_text.json$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/subreddit_stylesheet",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/subreddit_stylesheet",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/subreddit_stylesheet"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Update a subreddit's stylesheet.\n\nop should be save to update the contents of the stylesheet.",
    "args": {
      "api_type": {
        "describe": "the string json"
      },
      "op": {
        "describe": "one of (save, preview)"
      },
      "reason": {
        "describe": "a string up to 256 characters long, consisting of printable characters."
      },
      "stylesheet_contents": {
        "describe": "the new stylesheet content"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/subreddit_stylesheet$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/upload_sr_img",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/upload_sr_img",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/upload_sr_img"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Add or replace a subreddit image or custom header logo.\n\nIf the header value is 0, an image for use in the subreddit\nstylesheet is uploaded with the name specified in name. If the value\nof header is 1 then the image uploaded will be the subreddit's new\nlogo and name will be ignored.\n\nThe img_type field specifies whether to store the uploaded image as a\nPNG or JPEG.\n\nSubreddits have a limited number of images that can be in use at any\ngiven time. If no image with the specified name already exists, one of\nthe slots will be consumed.\n\nIf an image with the specified name already exists, it will be\nreplaced.  This does not affect the stylesheet immediately, but will\ntake effect the next time the stylesheet is saved.\n\nSee also: /api/delete_sr_img and\n/api/delete_sr_header.",
    "args": {
      "file": {
        "describe": "file upload with maximum size of 500 KiB"
      },
      "formid": {
        "describe": "(optional) can be ignored"
      },
      "header": {
        "describe": "an integer between 0 and 1"
      },
      "img_type": {
        "describe": "one of png or jpg (default: png)"
      },
      "name": {
        "describe": "a valid subreddit image name"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/upload_sr_img$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/wiki/alloweditor/$act",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/wiki/alloweditor/$act",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/wiki/alloweditor/$act"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Allow/deny username to edit this wiki page",
    "args": {
      "act": {
        "describe": "one of (del, add)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "uh": {
        "describe": "a modhash"
      },
      "username": {
        "describe": "the name of an existing user"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/wiki/alloweditor/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "act"
    ]
  },
  {
    "path": "/r/$subreddit/api/wiki/alloweditor/add",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/wiki/alloweditor/add",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/wiki/alloweditor/add"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Allow/deny username to edit this wiki page",
    "args": {
      "act": {
        "describe": "one of (del, add)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "uh": {
        "describe": "a modhash"
      },
      "username": {
        "describe": "the name of an existing user"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/wiki/alloweditor/add$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/wiki/alloweditor/del",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/wiki/alloweditor/del",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/wiki/alloweditor/del"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Allow/deny username to edit this wiki page",
    "args": {
      "act": {
        "describe": "one of (del, add)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "uh": {
        "describe": "a modhash"
      },
      "username": {
        "describe": "the name of an existing user"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/wiki/alloweditor/del$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/wiki/edit",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/wiki/edit",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/wiki/edit"
    },
    "oauth": [
      "wikiedit"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Edit a wiki page",
    "args": {
      "content": {
        "describe": ""
      },
      "page": {
        "describe": "the name of an existing page or a new page to create"
      },
      "previous": {
        "describe": "the starting point revision for this edit"
      },
      "reason": {
        "describe": "a string up to 256 characters long, consisting of printable characters."
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/wiki/edit$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/wiki/hide",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/wiki/hide",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/wiki/hide"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Toggle the public visibility of a wiki page revision",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "revision": {
        "describe": "a wiki revision ID"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/wiki/hide$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/api/wiki/revert",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/api/wiki/revert",
      "standard": "https://ssl.reddit.com/r/$subreddit/api/wiki/revert"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Revert a wiki page to revision",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "revision": {
        "describe": "a wiki revision ID"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/api/wiki/revert$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/comments/$article",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/comments/$article",
      "standard": "https://www.reddit.com/r/$subreddit/comments/$article"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get the comment tree for a given Link article.\n\nIf supplied, comment is the ID36 of a comment in the comment tree for\narticle. This comment will be the (highlighted) focal point of the\nreturned view and context will be the number of parents shown.\n\ndepth is the maximum depth of subtrees in the thread.\n\nlimit is the maximum number of comments to return.\n\nSee also: /api/morechildren and\n/api/comment.",
    "args": {
      "article": {
        "describe": "ID36 of a link"
      },
      "comment": {
        "describe": "(optional) ID36 of a comment"
      },
      "context": {
        "describe": "an integer between 0 and 8"
      },
      "depth": {
        "describe": "(optional) an integer"
      },
      "limit": {
        "describe": "(optional) an integer"
      },
      "sort": {
        "describe": "one of (confidence, top, new, hot, controversial, old, random)"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/comments/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "article"
    ]
  },
  {
    "path": "/r/$subreddit/controversial",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/controversial",
      "standard": "https://www.reddit.com/r/$subreddit/controversial"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/controversial$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/hot",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/hot",
      "standard": "https://www.reddit.com/r/$subreddit/hot"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/hot$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/new",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/new",
      "standard": "https://www.reddit.com/r/$subreddit/new"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/new$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/random",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/random",
      "standard": "https://www.reddit.com/r/$subreddit/random"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "The Serendipity button",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/random$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/search",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/search",
      "standard": "https://www.reddit.com/r/$subreddit/search"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Search links page.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "q": {
        "describe": "a string no longer than 512 characters"
      },
      "restrict_sr": {
        "describe": "boolean value"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "sort": {
        "describe": "one of (relevance, new, hot, top, comments)"
      },
      "syntax": {
        "describe": "one of (cloudsearch, lucene, plain)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/search$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/stylesheet",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/stylesheet",
      "standard": "https://www.reddit.com/r/$subreddit/stylesheet"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Redirect to the subreddit's stylesheet if one exists.\n\nSee also: /api/subreddit_stylesheet.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/stylesheet$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/top",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/top",
      "standard": "https://www.reddit.com/r/$subreddit/top"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/top$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/wiki/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/wiki/$page",
      "standard": "https://www.reddit.com/r/$subreddit/wiki/$page"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return the content of a wiki page\n\nIf v is given, show the wiki page as it was at that version\nIf both v and v2 are given, show a diff of the two",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "v": {
        "describe": "a wiki revision ID"
      },
      "v2": {
        "describe": "a wiki revision ID"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/wiki/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "page"
    ]
  },
  {
    "path": "/r/$subreddit/wiki/discussions/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/wiki/discussions/$page",
      "standard": "https://www.reddit.com/r/$subreddit/wiki/discussions/$page"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of discussions about this wiki page\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/wiki/discussions/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "page"
    ]
  },
  {
    "path": "/r/$subreddit/wiki/pages",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/wiki/pages",
      "standard": "https://www.reddit.com/r/$subreddit/wiki/pages"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of wiki pages in this subreddit",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/wiki/pages$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/wiki/revisions",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/wiki/revisions",
      "standard": "https://www.reddit.com/r/$subreddit/wiki/revisions"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of recently changed wiki pages in this subreddit",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/wiki/revisions$"
    },
    "parameters": [
      "subreddit"
    ]
  },
  {
    "path": "/r/$subreddit/wiki/revisions/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/wiki/revisions/$page",
      "standard": "https://www.reddit.com/r/$subreddit/wiki/revisions/$page"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of revisions of this wiki page\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/wiki/revisions/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "page"
    ]
  },
  {
    "path": "/r/$subreddit/wiki/settings/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/wiki/settings/$page",
      "standard": "https://www.reddit.com/r/$subreddit/wiki/settings/$page"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve the current permission settings for page",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/wiki/settings/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "page"
    ]
  },
  {
    "path": "/r/$subreddit/wiki/settings/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/r/$subreddit/wiki/settings/$page",
      "standard": "https://ssl.reddit.com/r/$subreddit/wiki/settings/$page"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Update the permissions and visibility of wiki page",
    "args": {
      "listed": {
        "describe": "boolean value"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "permlevel": {
        "describe": "an integer"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/r/([^/]+)/wiki/settings/([^/]+)$"
    },
    "parameters": [
      "subreddit",
      "page"
    ]
  },
  {
    "path": "/random",
    "url": {
      "oauth": "https://oauth.reddit.com/random",
      "standard": "https://www.reddit.com/random"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "The Serendipity button",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/random$"
    }
  },
  {
    "path": "/search",
    "url": {
      "oauth": "https://oauth.reddit.com/search",
      "standard": "https://www.reddit.com/search"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Search links page.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "q": {
        "describe": "a string no longer than 512 characters"
      },
      "restrict_sr": {
        "describe": "boolean value"
      },
      "show": {
        "describe": "(optional) the string all"
      },
      "sort": {
        "describe": "one of (relevance, new, hot, top, comments)"
      },
      "syntax": {
        "describe": "one of (cloudsearch, lucene, plain)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/search$"
    }
  },
  {
    "path": "/stylesheet",
    "url": {
      "oauth": "https://oauth.reddit.com/stylesheet",
      "standard": "https://www.reddit.com/stylesheet"
    },
    "oauth": [
      "modconfig"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Redirect to the subreddit's stylesheet if one exists.\n\nSee also: /api/subreddit_stylesheet.",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/stylesheet$"
    }
  },
  {
    "path": "/subreddits/$where",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/$where",
      "standard": "https://www.reddit.com/subreddits/$where"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get all subreddits.\n\nThe where parameter chooses the order in which the subreddits are\ndisplayed.  popular sorts on the activity of the subreddit and the\nposition of the subreddits can shift around. new sorts the subreddits\nbased on their creation date, newest first.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/([^/]+)$"
    },
    "parameters": [
      "where"
    ]
  },
  {
    "path": "/subreddits/mine/$where",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/mine/$where",
      "standard": "https://www.reddit.com/subreddits/mine/$where"
    },
    "oauth": [
      "mysubreddits"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get subreddits the user has a relationship with.\n\nThe where parameter chooses which subreddits are returned as follows:\n\n\nsubscriber - subreddits the user is subscribed to\ncontributor - subreddits the user is an approved submitter in\nmoderator - subreddits the user is a moderator of\n\n\nSee also: /api/subscribe,\n/api/friend, and\n/api/accept_moderator_invite.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/mine/([^/]+)$"
    },
    "parameters": [
      "where"
    ]
  },
  {
    "path": "/subreddits/mine/contributor",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/mine/contributor",
      "standard": "https://www.reddit.com/subreddits/mine/contributor"
    },
    "oauth": [
      "mysubreddits"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get subreddits the user has a relationship with.\n\nThe where parameter chooses which subreddits are returned as follows:\n\n\nsubscriber - subreddits the user is subscribed to\ncontributor - subreddits the user is an approved submitter in\nmoderator - subreddits the user is a moderator of\n\n\nSee also: /api/subscribe,\n/api/friend, and\n/api/accept_moderator_invite.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/mine/contributor$"
    }
  },
  {
    "path": "/subreddits/mine/moderator",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/mine/moderator",
      "standard": "https://www.reddit.com/subreddits/mine/moderator"
    },
    "oauth": [
      "mysubreddits"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get subreddits the user has a relationship with.\n\nThe where parameter chooses which subreddits are returned as follows:\n\n\nsubscriber - subreddits the user is subscribed to\ncontributor - subreddits the user is an approved submitter in\nmoderator - subreddits the user is a moderator of\n\n\nSee also: /api/subscribe,\n/api/friend, and\n/api/accept_moderator_invite.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/mine/moderator$"
    }
  },
  {
    "path": "/subreddits/mine/subscriber",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/mine/subscriber",
      "standard": "https://www.reddit.com/subreddits/mine/subscriber"
    },
    "oauth": [
      "mysubreddits"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get subreddits the user has a relationship with.\n\nThe where parameter chooses which subreddits are returned as follows:\n\n\nsubscriber - subreddits the user is subscribed to\ncontributor - subreddits the user is an approved submitter in\nmoderator - subreddits the user is a moderator of\n\n\nSee also: /api/subscribe,\n/api/friend, and\n/api/accept_moderator_invite.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/mine/subscriber$"
    }
  },
  {
    "path": "/subreddits/new",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/new",
      "standard": "https://www.reddit.com/subreddits/new"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get all subreddits.\n\nThe where parameter chooses the order in which the subreddits are\ndisplayed.  popular sorts on the activity of the subreddit and the\nposition of the subreddits can shift around. new sorts the subreddits\nbased on their creation date, newest first.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/new$"
    }
  },
  {
    "path": "/subreddits/popular",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/popular",
      "standard": "https://www.reddit.com/subreddits/popular"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Get all subreddits.\n\nThe where parameter chooses the order in which the subreddits are\ndisplayed.  popular sorts on the activity of the subreddit and the\nposition of the subreddits can shift around. new sorts the subreddits\nbased on their creation date, newest first.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/popular$"
    }
  },
  {
    "path": "/subreddits/search",
    "url": {
      "oauth": "https://oauth.reddit.com/subreddits/search",
      "standard": "https://www.reddit.com/subreddits/search"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "Search subreddits by title and description.\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "q": {
        "describe": "a search query"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/subreddits/search$"
    }
  },
  {
    "path": "/top",
    "url": {
      "oauth": "https://oauth.reddit.com/top",
      "standard": "https://www.reddit.com/top"
    },
    "oauth": [
      "read"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/top$"
    }
  },
  {
    "path": "/user/$username/$where",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/$where",
      "standard": "https://www.reddit.com/user/$username/$where"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/([^/]+)$"
    },
    "parameters": [
      "username",
      "where"
    ]
  },
  {
    "path": "/user/$username/about.json",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/about.json",
      "standard": "https://www.reddit.com/user/$username/about.json"
    },
    "oauth": [
      "read"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return information about the user, including karma and gold status.",
    "args": {
      "username": {
        "describe": "the name of an existing user"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/about.json$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/comments",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/comments",
      "standard": "https://www.reddit.com/user/$username/comments"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/comments$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/disliked",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/disliked",
      "standard": "https://www.reddit.com/user/$username/disliked"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/disliked$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/gilded",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/gilded",
      "standard": "https://www.reddit.com/user/$username/gilded"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/gilded$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/hidden",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/hidden",
      "standard": "https://www.reddit.com/user/$username/hidden"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/hidden$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/liked",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/liked",
      "standard": "https://www.reddit.com/user/$username/liked"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/liked$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/overview",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/overview",
      "standard": "https://www.reddit.com/user/$username/overview"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/overview$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/saved",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/saved",
      "standard": "https://www.reddit.com/user/$username/saved"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/saved$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/user/$username/submitted",
    "url": {
      "oauth": "https://oauth.reddit.com/user/$username/submitted",
      "standard": "https://www.reddit.com/user/$username/submitted"
    },
    "oauth": [
      "history"
    ],
    "extensions": [
      ".json",
      ".xml"
    ],
    "method": "GET",
    "describe": "This endpoint is a listing.",
    "args": {
      "show": {
        "describe": "one of (given)"
      },
      "sort": {
        "describe": "one of (hot, new, top, controversial)"
      },
      "t": {
        "describe": "one of (hour, day, week, month, year, all)"
      },
      "username": {
        "describe": "the name of an existing user"
      },
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/user/([^/]+)/submitted$"
    },
    "parameters": [
      "username"
    ]
  },
  {
    "path": "/wiki/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/wiki/$page",
      "standard": "https://www.reddit.com/wiki/$page"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Return the content of a wiki page\n\nIf v is given, show the wiki page as it was at that version\nIf both v and v2 are given, show a diff of the two",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "v": {
        "describe": "a wiki revision ID"
      },
      "v2": {
        "describe": "a wiki revision ID"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/wiki/([^/]+)$"
    },
    "parameters": [
      "page"
    ]
  },
  {
    "path": "/wiki/discussions/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/wiki/discussions/$page",
      "standard": "https://www.reddit.com/wiki/discussions/$page"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of discussions about this wiki page\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/wiki/discussions/([^/]+)$"
    },
    "parameters": [
      "page"
    ]
  },
  {
    "path": "/wiki/pages",
    "url": {
      "oauth": "https://oauth.reddit.com/wiki/pages",
      "standard": "https://www.reddit.com/wiki/pages"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of wiki pages in this subreddit",
    "args": {},
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/wiki/pages$"
    }
  },
  {
    "path": "/wiki/revisions",
    "url": {
      "oauth": "https://oauth.reddit.com/wiki/revisions",
      "standard": "https://www.reddit.com/wiki/revisions"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of recently changed wiki pages in this subreddit",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/wiki/revisions$"
    }
  },
  {
    "path": "/wiki/revisions/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/wiki/revisions/$page",
      "standard": "https://www.reddit.com/wiki/revisions/$page"
    },
    "oauth": [
      "wikiread"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve a list of revisions of this wiki page\n\nThis endpoint is a listing.",
    "args": {
      "after": {
        "describe": "fullname of a thing"
      },
      "before": {
        "describe": "fullname of a thing"
      },
      "count": {
        "describe": "a positive integer (default: 0)"
      },
      "limit": {
        "describe": "the maximum number of items desired (default: 25, maximum: 100)"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "show": {
        "describe": "(optional) the string all"
      }
    },
    "isListing": true,
    "re": {
      "_type": "RegExp",
      "source": "^/wiki/revisions/([^/]+)$"
    },
    "parameters": [
      "page"
    ]
  },
  {
    "path": "/wiki/settings/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/wiki/settings/$page",
      "standard": "https://www.reddit.com/wiki/settings/$page"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "GET",
    "describe": "Retrieve the current permission settings for page",
    "args": {
      "page": {
        "describe": "the name of an existing wiki page"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/wiki/settings/([^/]+)$"
    },
    "parameters": [
      "page"
    ]
  },
  {
    "path": "/wiki/settings/$page",
    "url": {
      "oauth": "https://oauth.reddit.com/wiki/settings/$page",
      "standard": "https://ssl.reddit.com/wiki/settings/$page"
    },
    "oauth": [
      "modwiki"
    ],
    "extensions": [],
    "method": "POST",
    "describe": "Update the permissions and visibility of wiki page",
    "args": {
      "listed": {
        "describe": "boolean value"
      },
      "page": {
        "describe": "the name of an existing wiki page"
      },
      "permlevel": {
        "describe": "an integer"
      },
      "uh": {
        "describe": "a modhash"
      }
    },
    "isListing": false,
    "re": {
      "_type": "RegExp",
      "source": "^/wiki/settings/([^/]+)$"
    },
    "parameters": [
      "page"
    ]
  }
]
